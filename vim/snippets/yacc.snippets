#fileheader
snippet fileheader
	/// Author: jee<lijie2@ucweb.com>
	/// Date: `strftime("%Y-%m-%d")`
	/// Usage: ${1}

# main()
snippet main
	int main(int argc, char *argv[]) {
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>

	${2}
# #include util headers
snippet include
	#include <stdio.h>
	#include <stdlib.h>
	#include <unistd.h>

	${1}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"

	${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper('__'.Filename('', 'UNTITLED').'_H__')`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if(${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1:/* do sth */}
	}
snippet elif
	else if(${1:/* condition */}) {
		${2:/*do sth */}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while(${1:/* condition */});
# While Loop
snippet wh
	while(${1:iter} != ${2:iter_end}) {
		${4:/* code */}
		${3:iter}++;
	}
snippet whileiter
	${1:_stl_iterator_} ${2:_iter_}_iter = ${3:_var_stl_}.begin();
	$1 $2_iter_end = $3.end();
	while($2_iter != $2_iter_end) {
		${4: /*	code */}; 
		$2_iter++;
	}
# For Loop
snippet for
	for(${2}; ${3:iter} < ${1:count}; $3${4:++}) {
		${5:/* code */}
	}
# Custom For Loop
snippet forr
	for(${1:int} ${2:i} = ${3:0}; $2 != ${4:max_count}; $2${5:++}) {
		${6:/* code */}
	}
#iterfor
snippet foriter
	${1:_stl_iterator_} ${2:_iter_}_iter = ${3:_var_stl_}.begin();
	$1 $2_iter_end = $3.end();
	for(; $2_iter != $2_iter_end; $2_iter++) {
		${4: /*	code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet un
	unsigned
snippet /*
	/* ${1} */
snippet token
	%token ${1}
snippet  type 
	%type ${1}
snippet base
	%{
		/* prologue */
		/* include, define, function declarations*/
		${1}

	%}

	/* bison declarations */
	/* token type */


	/*grammar rules*/
	%%
	%%

	/* epilogue */

